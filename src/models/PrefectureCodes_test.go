// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPrefectureCodes(t *testing.T) {
	t.Parallel()

	query := PrefectureCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPrefectureCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefectureCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PrefectureCodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefectureCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefectureCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefectureCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PrefectureCodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PrefectureCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PrefectureCodeExists to return true, but got false.")
	}
}

func testPrefectureCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	prefectureCodeFound, err := FindPrefectureCode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if prefectureCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPrefectureCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PrefectureCodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPrefectureCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PrefectureCodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPrefectureCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	prefectureCodeOne := &PrefectureCode{}
	prefectureCodeTwo := &PrefectureCode{}
	if err = randomize.Struct(seed, prefectureCodeOne, prefectureCodeDBTypes, false, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}
	if err = randomize.Struct(seed, prefectureCodeTwo, prefectureCodeDBTypes, false, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefectureCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefectureCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrefectureCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPrefectureCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	prefectureCodeOne := &PrefectureCode{}
	prefectureCodeTwo := &PrefectureCode{}
	if err = randomize.Struct(seed, prefectureCodeOne, prefectureCodeDBTypes, false, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}
	if err = randomize.Struct(seed, prefectureCodeTwo, prefectureCodeDBTypes, false, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefectureCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefectureCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func prefectureCodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func prefectureCodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefectureCode) error {
	*o = PrefectureCode{}
	return nil
}

func testPrefectureCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PrefectureCode{}
	o := &PrefectureCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PrefectureCode object: %s", err)
	}

	AddPrefectureCodeHook(boil.BeforeInsertHook, prefectureCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	prefectureCodeBeforeInsertHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.AfterInsertHook, prefectureCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	prefectureCodeAfterInsertHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.AfterSelectHook, prefectureCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	prefectureCodeAfterSelectHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.BeforeUpdateHook, prefectureCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	prefectureCodeBeforeUpdateHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.AfterUpdateHook, prefectureCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	prefectureCodeAfterUpdateHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.BeforeDeleteHook, prefectureCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	prefectureCodeBeforeDeleteHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.AfterDeleteHook, prefectureCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	prefectureCodeAfterDeleteHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.BeforeUpsertHook, prefectureCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	prefectureCodeBeforeUpsertHooks = []PrefectureCodeHook{}

	AddPrefectureCodeHook(boil.AfterUpsertHook, prefectureCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	prefectureCodeAfterUpsertHooks = []PrefectureCodeHook{}
}

func testPrefectureCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefectureCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(prefectureCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefectureCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefectureCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefectureCodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefectureCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrefectureCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	prefectureCodeDBTypes = map[string]string{`ID`: `int`, `Name`: `text`, `Created`: `datetime`, `Updated`: `datetime`}
	_                     = bytes.MinRead
)

func testPrefectureCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(prefectureCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(prefectureCodeAllColumns) == len(prefectureCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPrefectureCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(prefectureCodeAllColumns) == len(prefectureCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrefectureCode{}
	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefectureCodeDBTypes, true, prefectureCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(prefectureCodeAllColumns, prefectureCodePrimaryKeyColumns) {
		fields = prefectureCodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			prefectureCodeAllColumns,
			prefectureCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PrefectureCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPrefectureCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(prefectureCodeAllColumns) == len(prefectureCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPrefectureCodeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PrefectureCode{}
	if err = randomize.Struct(seed, &o, prefectureCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrefectureCode: %s", err)
	}

	count, err := PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, prefectureCodeDBTypes, false, prefectureCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefectureCode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrefectureCode: %s", err)
	}

	count, err = PrefectureCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
