// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIntensityStations(t *testing.T) {
	t.Parallel()

	query := IntensityStations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIntensityStationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IntensityStations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IntensityStationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IntensityStationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IntensityStation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IntensityStationExists to return true, but got false.")
	}
}

func testIntensityStationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	intensityStationFound, err := FindIntensityStation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if intensityStationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIntensityStationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IntensityStations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIntensityStationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IntensityStations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIntensityStationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	intensityStationOne := &IntensityStation{}
	intensityStationTwo := &IntensityStation{}
	if err = randomize.Struct(seed, intensityStationOne, intensityStationDBTypes, false, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}
	if err = randomize.Struct(seed, intensityStationTwo, intensityStationDBTypes, false, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = intensityStationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = intensityStationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IntensityStations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIntensityStationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	intensityStationOne := &IntensityStation{}
	intensityStationTwo := &IntensityStation{}
	if err = randomize.Struct(seed, intensityStationOne, intensityStationDBTypes, false, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}
	if err = randomize.Struct(seed, intensityStationTwo, intensityStationDBTypes, false, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = intensityStationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = intensityStationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func intensityStationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func intensityStationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStation) error {
	*o = IntensityStation{}
	return nil
}

func testIntensityStationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IntensityStation{}
	o := &IntensityStation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, intensityStationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IntensityStation object: %s", err)
	}

	AddIntensityStationHook(boil.BeforeInsertHook, intensityStationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	intensityStationBeforeInsertHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.AfterInsertHook, intensityStationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	intensityStationAfterInsertHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.AfterSelectHook, intensityStationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	intensityStationAfterSelectHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.BeforeUpdateHook, intensityStationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	intensityStationBeforeUpdateHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.AfterUpdateHook, intensityStationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	intensityStationAfterUpdateHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.BeforeDeleteHook, intensityStationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	intensityStationBeforeDeleteHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.AfterDeleteHook, intensityStationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	intensityStationAfterDeleteHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.BeforeUpsertHook, intensityStationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	intensityStationBeforeUpsertHooks = []IntensityStationHook{}

	AddIntensityStationHook(boil.AfterUpsertHook, intensityStationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	intensityStationAfterUpsertHooks = []IntensityStationHook{}
}

func testIntensityStationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIntensityStationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(intensityStationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIntensityStationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIntensityStationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IntensityStationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIntensityStationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IntensityStations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	intensityStationDBTypes = map[string]string{`ID`: `int`, `Name`: `text`, `Lat`: `double`, `Lon`: `double`, `PrefectureID`: `int`, `AreaID`: `int`, `Created`: `datetime`, `Updated`: `datetime`}
	_                       = bytes.MinRead
)

func testIntensityStationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(intensityStationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(intensityStationAllColumns) == len(intensityStationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIntensityStationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(intensityStationAllColumns) == len(intensityStationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStation{}
	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, intensityStationDBTypes, true, intensityStationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(intensityStationAllColumns, intensityStationPrimaryKeyColumns) {
		fields = intensityStationAllColumns
	} else {
		fields = strmangle.SetComplement(
			intensityStationAllColumns,
			intensityStationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IntensityStationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIntensityStationsUpsert(t *testing.T) {
	t.Parallel()

	if len(intensityStationAllColumns) == len(intensityStationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIntensityStationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IntensityStation{}
	if err = randomize.Struct(seed, &o, intensityStationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IntensityStation: %s", err)
	}

	count, err := IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, intensityStationDBTypes, false, intensityStationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IntensityStation: %s", err)
	}

	count, err = IntensityStations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
