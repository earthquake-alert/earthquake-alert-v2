// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEarthquakeEpicenters(t *testing.T) {
	t.Parallel()

	query := EarthquakeEpicenters()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEarthquakeEpicentersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakeEpicentersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EarthquakeEpicenters().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakeEpicentersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarthquakeEpicenterSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakeEpicentersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EarthquakeEpicenterExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EarthquakeEpicenter exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EarthquakeEpicenterExists to return true, but got false.")
	}
}

func testEarthquakeEpicentersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	earthquakeEpicenterFound, err := FindEarthquakeEpicenter(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if earthquakeEpicenterFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEarthquakeEpicentersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EarthquakeEpicenters().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEarthquakeEpicentersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EarthquakeEpicenters().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEarthquakeEpicentersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	earthquakeEpicenterOne := &EarthquakeEpicenter{}
	earthquakeEpicenterTwo := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, earthquakeEpicenterOne, earthquakeEpicenterDBTypes, false, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}
	if err = randomize.Struct(seed, earthquakeEpicenterTwo, earthquakeEpicenterDBTypes, false, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earthquakeEpicenterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earthquakeEpicenterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EarthquakeEpicenters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEarthquakeEpicentersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	earthquakeEpicenterOne := &EarthquakeEpicenter{}
	earthquakeEpicenterTwo := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, earthquakeEpicenterOne, earthquakeEpicenterDBTypes, false, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}
	if err = randomize.Struct(seed, earthquakeEpicenterTwo, earthquakeEpicenterDBTypes, false, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earthquakeEpicenterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earthquakeEpicenterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func earthquakeEpicenterBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func earthquakeEpicenterAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EarthquakeEpicenter) error {
	*o = EarthquakeEpicenter{}
	return nil
}

func testEarthquakeEpicentersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EarthquakeEpicenter{}
	o := &EarthquakeEpicenter{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter object: %s", err)
	}

	AddEarthquakeEpicenterHook(boil.BeforeInsertHook, earthquakeEpicenterBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterBeforeInsertHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.AfterInsertHook, earthquakeEpicenterAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterAfterInsertHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.AfterSelectHook, earthquakeEpicenterAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterAfterSelectHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.BeforeUpdateHook, earthquakeEpicenterBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterBeforeUpdateHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.AfterUpdateHook, earthquakeEpicenterAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterAfterUpdateHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.BeforeDeleteHook, earthquakeEpicenterBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterBeforeDeleteHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.AfterDeleteHook, earthquakeEpicenterAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterAfterDeleteHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.BeforeUpsertHook, earthquakeEpicenterBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterBeforeUpsertHooks = []EarthquakeEpicenterHook{}

	AddEarthquakeEpicenterHook(boil.AfterUpsertHook, earthquakeEpicenterAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	earthquakeEpicenterAfterUpsertHooks = []EarthquakeEpicenterHook{}
}

func testEarthquakeEpicentersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarthquakeEpicentersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(earthquakeEpicenterColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarthquakeEpicentersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarthquakeEpicentersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarthquakeEpicenterSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarthquakeEpicentersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EarthquakeEpicenters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	earthquakeEpicenterDBTypes = map[string]string{`ID`: `int`, `EventID`: `bigint`, `Lat`: `int`, `Lon`: `int`, `Depth`: `int`, `EpicenterName`: `text`, `Magnitude`: `int`, `MagnitudeType`: `varchar`, `Date`: `datetime`, `Created`: `datetime`, `Row`: `text`}
	_                          = bytes.MinRead
)

func testEarthquakeEpicentersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(earthquakeEpicenterPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(earthquakeEpicenterAllColumns) == len(earthquakeEpicenterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEarthquakeEpicentersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(earthquakeEpicenterAllColumns) == len(earthquakeEpicenterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EarthquakeEpicenter{}
	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earthquakeEpicenterDBTypes, true, earthquakeEpicenterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(earthquakeEpicenterAllColumns, earthquakeEpicenterPrimaryKeyColumns) {
		fields = earthquakeEpicenterAllColumns
	} else {
		fields = strmangle.SetComplement(
			earthquakeEpicenterAllColumns,
			earthquakeEpicenterPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EarthquakeEpicenterSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEarthquakeEpicentersUpsert(t *testing.T) {
	t.Parallel()

	if len(earthquakeEpicenterAllColumns) == len(earthquakeEpicenterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEarthquakeEpicenterUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EarthquakeEpicenter{}
	if err = randomize.Struct(seed, &o, earthquakeEpicenterDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EarthquakeEpicenter: %s", err)
	}

	count, err := EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, earthquakeEpicenterDBTypes, false, earthquakeEpicenterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EarthquakeEpicenter struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EarthquakeEpicenter: %s", err)
	}

	count, err = EarthquakeEpicenters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
