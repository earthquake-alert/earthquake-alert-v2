// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IntensityStation is an object representing the database table.
type IntensityStation struct {
	ID           uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Lat          float64   `boil:"lat" json:"lat" toml:"lat" yaml:"lat"`
	Lon          float64   `boil:"lon" json:"lon" toml:"lon" yaml:"lon"`
	PrefectureID uint      `boil:"prefecture_id" json:"prefecture_id" toml:"prefecture_id" yaml:"prefecture_id"`
	AreaID       uint      `boil:"area_id" json:"area_id" toml:"area_id" yaml:"area_id"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Updated      time.Time `boil:"updated" json:"updated" toml:"updated" yaml:"updated"`

	R *intensityStationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L intensityStationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IntensityStationColumns = struct {
	ID           string
	Name         string
	Lat          string
	Lon          string
	PrefectureID string
	AreaID       string
	Created      string
	Updated      string
}{
	ID:           "id",
	Name:         "name",
	Lat:          "lat",
	Lon:          "lon",
	PrefectureID: "prefecture_id",
	AreaID:       "area_id",
	Created:      "created",
	Updated:      "updated",
}

var IntensityStationTableColumns = struct {
	ID           string
	Name         string
	Lat          string
	Lon          string
	PrefectureID string
	AreaID       string
	Created      string
	Updated      string
}{
	ID:           "IntensityStations.id",
	Name:         "IntensityStations.name",
	Lat:          "IntensityStations.lat",
	Lon:          "IntensityStations.lon",
	PrefectureID: "IntensityStations.prefecture_id",
	AreaID:       "IntensityStations.area_id",
	Created:      "IntensityStations.created",
	Updated:      "IntensityStations.updated",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var IntensityStationWhere = struct {
	ID           whereHelperuint
	Name         whereHelperstring
	Lat          whereHelperfloat64
	Lon          whereHelperfloat64
	PrefectureID whereHelperuint
	AreaID       whereHelperuint
	Created      whereHelpertime_Time
	Updated      whereHelpertime_Time
}{
	ID:           whereHelperuint{field: "`IntensityStations`.`id`"},
	Name:         whereHelperstring{field: "`IntensityStations`.`name`"},
	Lat:          whereHelperfloat64{field: "`IntensityStations`.`lat`"},
	Lon:          whereHelperfloat64{field: "`IntensityStations`.`lon`"},
	PrefectureID: whereHelperuint{field: "`IntensityStations`.`prefecture_id`"},
	AreaID:       whereHelperuint{field: "`IntensityStations`.`area_id`"},
	Created:      whereHelpertime_Time{field: "`IntensityStations`.`created`"},
	Updated:      whereHelpertime_Time{field: "`IntensityStations`.`updated`"},
}

// IntensityStationRels is where relationship names are stored.
var IntensityStationRels = struct {
}{}

// intensityStationR is where relationships are stored.
type intensityStationR struct {
}

// NewStruct creates a new relationship struct
func (*intensityStationR) NewStruct() *intensityStationR {
	return &intensityStationR{}
}

// intensityStationL is where Load methods for each relationship are stored.
type intensityStationL struct{}

var (
	intensityStationAllColumns            = []string{"id", "name", "lat", "lon", "prefecture_id", "area_id", "created", "updated"}
	intensityStationColumnsWithoutDefault = []string{"id", "name", "lat", "lon", "prefecture_id", "area_id"}
	intensityStationColumnsWithDefault    = []string{"created", "updated"}
	intensityStationPrimaryKeyColumns     = []string{"id"}
	intensityStationGeneratedColumns      = []string{}
)

type (
	// IntensityStationSlice is an alias for a slice of pointers to IntensityStation.
	// This should almost always be used instead of []IntensityStation.
	IntensityStationSlice []*IntensityStation
	// IntensityStationHook is the signature for custom IntensityStation hook methods
	IntensityStationHook func(context.Context, boil.ContextExecutor, *IntensityStation) error

	intensityStationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	intensityStationType                 = reflect.TypeOf(&IntensityStation{})
	intensityStationMapping              = queries.MakeStructMapping(intensityStationType)
	intensityStationPrimaryKeyMapping, _ = queries.BindMapping(intensityStationType, intensityStationMapping, intensityStationPrimaryKeyColumns)
	intensityStationInsertCacheMut       sync.RWMutex
	intensityStationInsertCache          = make(map[string]insertCache)
	intensityStationUpdateCacheMut       sync.RWMutex
	intensityStationUpdateCache          = make(map[string]updateCache)
	intensityStationUpsertCacheMut       sync.RWMutex
	intensityStationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var intensityStationAfterSelectHooks []IntensityStationHook

var intensityStationBeforeInsertHooks []IntensityStationHook
var intensityStationAfterInsertHooks []IntensityStationHook

var intensityStationBeforeUpdateHooks []IntensityStationHook
var intensityStationAfterUpdateHooks []IntensityStationHook

var intensityStationBeforeDeleteHooks []IntensityStationHook
var intensityStationAfterDeleteHooks []IntensityStationHook

var intensityStationBeforeUpsertHooks []IntensityStationHook
var intensityStationAfterUpsertHooks []IntensityStationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IntensityStation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IntensityStation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IntensityStation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IntensityStation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IntensityStation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IntensityStation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IntensityStation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IntensityStation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IntensityStation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range intensityStationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIntensityStationHook registers your hook function for all future operations.
func AddIntensityStationHook(hookPoint boil.HookPoint, intensityStationHook IntensityStationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		intensityStationAfterSelectHooks = append(intensityStationAfterSelectHooks, intensityStationHook)
	case boil.BeforeInsertHook:
		intensityStationBeforeInsertHooks = append(intensityStationBeforeInsertHooks, intensityStationHook)
	case boil.AfterInsertHook:
		intensityStationAfterInsertHooks = append(intensityStationAfterInsertHooks, intensityStationHook)
	case boil.BeforeUpdateHook:
		intensityStationBeforeUpdateHooks = append(intensityStationBeforeUpdateHooks, intensityStationHook)
	case boil.AfterUpdateHook:
		intensityStationAfterUpdateHooks = append(intensityStationAfterUpdateHooks, intensityStationHook)
	case boil.BeforeDeleteHook:
		intensityStationBeforeDeleteHooks = append(intensityStationBeforeDeleteHooks, intensityStationHook)
	case boil.AfterDeleteHook:
		intensityStationAfterDeleteHooks = append(intensityStationAfterDeleteHooks, intensityStationHook)
	case boil.BeforeUpsertHook:
		intensityStationBeforeUpsertHooks = append(intensityStationBeforeUpsertHooks, intensityStationHook)
	case boil.AfterUpsertHook:
		intensityStationAfterUpsertHooks = append(intensityStationAfterUpsertHooks, intensityStationHook)
	}
}

// One returns a single intensityStation record from the query.
func (q intensityStationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IntensityStation, error) {
	o := &IntensityStation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for IntensityStations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IntensityStation records from the query.
func (q intensityStationQuery) All(ctx context.Context, exec boil.ContextExecutor) (IntensityStationSlice, error) {
	var o []*IntensityStation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IntensityStation slice")
	}

	if len(intensityStationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IntensityStation records in the query.
func (q intensityStationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count IntensityStations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q intensityStationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if IntensityStations exists")
	}

	return count > 0, nil
}

// IntensityStations retrieves all the records using an executor.
func IntensityStations(mods ...qm.QueryMod) intensityStationQuery {
	mods = append(mods, qm.From("`IntensityStations`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`IntensityStations`.*"})
	}

	return intensityStationQuery{q}
}

// FindIntensityStation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIntensityStation(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*IntensityStation, error) {
	intensityStationObj := &IntensityStation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `IntensityStations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, intensityStationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from IntensityStations")
	}

	if err = intensityStationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return intensityStationObj, err
	}

	return intensityStationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IntensityStation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no IntensityStations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(intensityStationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	intensityStationInsertCacheMut.RLock()
	cache, cached := intensityStationInsertCache[key]
	intensityStationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			intensityStationAllColumns,
			intensityStationColumnsWithDefault,
			intensityStationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(intensityStationType, intensityStationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(intensityStationType, intensityStationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `IntensityStations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `IntensityStations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `IntensityStations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, intensityStationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into IntensityStations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for IntensityStations")
	}

CacheNoHooks:
	if !cached {
		intensityStationInsertCacheMut.Lock()
		intensityStationInsertCache[key] = cache
		intensityStationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IntensityStation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IntensityStation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	intensityStationUpdateCacheMut.RLock()
	cache, cached := intensityStationUpdateCache[key]
	intensityStationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			intensityStationAllColumns,
			intensityStationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update IntensityStations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `IntensityStations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, intensityStationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(intensityStationType, intensityStationMapping, append(wl, intensityStationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update IntensityStations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for IntensityStations")
	}

	if !cached {
		intensityStationUpdateCacheMut.Lock()
		intensityStationUpdateCache[key] = cache
		intensityStationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q intensityStationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for IntensityStations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for IntensityStations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IntensityStationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), intensityStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `IntensityStations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, intensityStationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in intensityStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all intensityStation")
	}
	return rowsAff, nil
}

var mySQLIntensityStationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IntensityStation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no IntensityStations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(intensityStationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLIntensityStationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	intensityStationUpsertCacheMut.RLock()
	cache, cached := intensityStationUpsertCache[key]
	intensityStationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			intensityStationAllColumns,
			intensityStationColumnsWithDefault,
			intensityStationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			intensityStationAllColumns,
			intensityStationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert IntensityStations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`IntensityStations`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `IntensityStations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(intensityStationType, intensityStationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(intensityStationType, intensityStationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for IntensityStations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(intensityStationType, intensityStationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for IntensityStations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for IntensityStations")
	}

CacheNoHooks:
	if !cached {
		intensityStationUpsertCacheMut.Lock()
		intensityStationUpsertCache[key] = cache
		intensityStationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IntensityStation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IntensityStation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IntensityStation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), intensityStationPrimaryKeyMapping)
	sql := "DELETE FROM `IntensityStations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from IntensityStations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for IntensityStations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q intensityStationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no intensityStationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from IntensityStations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for IntensityStations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IntensityStationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(intensityStationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), intensityStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `IntensityStations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, intensityStationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from intensityStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for IntensityStations")
	}

	if len(intensityStationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IntensityStation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIntensityStation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IntensityStationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IntensityStationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), intensityStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `IntensityStations`.* FROM `IntensityStations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, intensityStationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IntensityStationSlice")
	}

	*o = slice

	return nil
}

// IntensityStationExists checks if the IntensityStation row exists.
func IntensityStationExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `IntensityStations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if IntensityStations exists")
	}

	return exists, nil
}

// Exists checks if the IntensityStation row exists.
func (o *IntensityStation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IntensityStationExists(ctx, exec, o.ID)
}
