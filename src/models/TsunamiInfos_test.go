// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTsunamiInfos(t *testing.T) {
	t.Parallel()

	query := TsunamiInfos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTsunamiInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTsunamiInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TsunamiInfos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTsunamiInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TsunamiInfoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTsunamiInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TsunamiInfoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TsunamiInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TsunamiInfoExists to return true, but got false.")
	}
}

func testTsunamiInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tsunamiInfoFound, err := FindTsunamiInfo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tsunamiInfoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTsunamiInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TsunamiInfos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTsunamiInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TsunamiInfos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTsunamiInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tsunamiInfoOne := &TsunamiInfo{}
	tsunamiInfoTwo := &TsunamiInfo{}
	if err = randomize.Struct(seed, tsunamiInfoOne, tsunamiInfoDBTypes, false, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, tsunamiInfoTwo, tsunamiInfoDBTypes, false, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tsunamiInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tsunamiInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TsunamiInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTsunamiInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tsunamiInfoOne := &TsunamiInfo{}
	tsunamiInfoTwo := &TsunamiInfo{}
	if err = randomize.Struct(seed, tsunamiInfoOne, tsunamiInfoDBTypes, false, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, tsunamiInfoTwo, tsunamiInfoDBTypes, false, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tsunamiInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tsunamiInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tsunamiInfoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func tsunamiInfoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TsunamiInfo) error {
	*o = TsunamiInfo{}
	return nil
}

func testTsunamiInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TsunamiInfo{}
	o := &TsunamiInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo object: %s", err)
	}

	AddTsunamiInfoHook(boil.BeforeInsertHook, tsunamiInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoBeforeInsertHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.AfterInsertHook, tsunamiInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoAfterInsertHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.AfterSelectHook, tsunamiInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoAfterSelectHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.BeforeUpdateHook, tsunamiInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoBeforeUpdateHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.AfterUpdateHook, tsunamiInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoAfterUpdateHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.BeforeDeleteHook, tsunamiInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoBeforeDeleteHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.AfterDeleteHook, tsunamiInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoAfterDeleteHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.BeforeUpsertHook, tsunamiInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoBeforeUpsertHooks = []TsunamiInfoHook{}

	AddTsunamiInfoHook(boil.AfterUpsertHook, tsunamiInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tsunamiInfoAfterUpsertHooks = []TsunamiInfoHook{}
}

func testTsunamiInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTsunamiInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tsunamiInfoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTsunamiInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTsunamiInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TsunamiInfoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTsunamiInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TsunamiInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tsunamiInfoDBTypes = map[string]string{`ID`: `int`, `Date`: `datetime`, `Created`: `datetime`, `Row`: `text`}
	_                  = bytes.MinRead
)

func testTsunamiInfosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tsunamiInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tsunamiInfoAllColumns) == len(tsunamiInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTsunamiInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tsunamiInfoAllColumns) == len(tsunamiInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TsunamiInfo{}
	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tsunamiInfoDBTypes, true, tsunamiInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tsunamiInfoAllColumns, tsunamiInfoPrimaryKeyColumns) {
		fields = tsunamiInfoAllColumns
	} else {
		fields = strmangle.SetComplement(
			tsunamiInfoAllColumns,
			tsunamiInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TsunamiInfoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTsunamiInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(tsunamiInfoAllColumns) == len(tsunamiInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTsunamiInfoUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TsunamiInfo{}
	if err = randomize.Struct(seed, &o, tsunamiInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TsunamiInfo: %s", err)
	}

	count, err := TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tsunamiInfoDBTypes, false, tsunamiInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TsunamiInfo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TsunamiInfo: %s", err)
	}

	count, err = TsunamiInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
