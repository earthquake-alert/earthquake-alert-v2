// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EarthquakeEpicenter is an object representing the database table.
type EarthquakeEpicenter struct {
	ID            uint         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID       uint64       `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	Lat           null.Float64 `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	Lon           null.Float64 `boil:"lon" json:"lon,omitempty" toml:"lon" yaml:"lon,omitempty"`
	Depth         null.Int     `boil:"depth" json:"depth,omitempty" toml:"depth" yaml:"depth,omitempty"`
	EpicenterName string       `boil:"epicenter_name" json:"epicenter_name" toml:"epicenter_name" yaml:"epicenter_name"`
	Magnitude     null.String  `boil:"magnitude" json:"magnitude,omitempty" toml:"magnitude" yaml:"magnitude,omitempty"`
	Date          time.Time    `boil:"date" json:"date" toml:"date" yaml:"date"`
	Created       time.Time    `boil:"created" json:"created" toml:"created" yaml:"created"`
	Row           string       `boil:"row" json:"row" toml:"row" yaml:"row"`

	R *earthquakeEpicenterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L earthquakeEpicenterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EarthquakeEpicenterColumns = struct {
	ID            string
	EventID       string
	Lat           string
	Lon           string
	Depth         string
	EpicenterName string
	Magnitude     string
	Date          string
	Created       string
	Row           string
}{
	ID:            "id",
	EventID:       "event_id",
	Lat:           "lat",
	Lon:           "lon",
	Depth:         "depth",
	EpicenterName: "epicenter_name",
	Magnitude:     "magnitude",
	Date:          "date",
	Created:       "created",
	Row:           "row",
}

var EarthquakeEpicenterTableColumns = struct {
	ID            string
	EventID       string
	Lat           string
	Lon           string
	Depth         string
	EpicenterName string
	Magnitude     string
	Date          string
	Created       string
	Row           string
}{
	ID:            "EarthquakeEpicenters.id",
	EventID:       "EarthquakeEpicenters.event_id",
	Lat:           "EarthquakeEpicenters.lat",
	Lon:           "EarthquakeEpicenters.lon",
	Depth:         "EarthquakeEpicenters.depth",
	EpicenterName: "EarthquakeEpicenters.epicenter_name",
	Magnitude:     "EarthquakeEpicenters.magnitude",
	Date:          "EarthquakeEpicenters.date",
	Created:       "EarthquakeEpicenters.created",
	Row:           "EarthquakeEpicenters.row",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EarthquakeEpicenterWhere = struct {
	ID            whereHelperuint
	EventID       whereHelperuint64
	Lat           whereHelpernull_Float64
	Lon           whereHelpernull_Float64
	Depth         whereHelpernull_Int
	EpicenterName whereHelperstring
	Magnitude     whereHelpernull_String
	Date          whereHelpertime_Time
	Created       whereHelpertime_Time
	Row           whereHelperstring
}{
	ID:            whereHelperuint{field: "`EarthquakeEpicenters`.`id`"},
	EventID:       whereHelperuint64{field: "`EarthquakeEpicenters`.`event_id`"},
	Lat:           whereHelpernull_Float64{field: "`EarthquakeEpicenters`.`lat`"},
	Lon:           whereHelpernull_Float64{field: "`EarthquakeEpicenters`.`lon`"},
	Depth:         whereHelpernull_Int{field: "`EarthquakeEpicenters`.`depth`"},
	EpicenterName: whereHelperstring{field: "`EarthquakeEpicenters`.`epicenter_name`"},
	Magnitude:     whereHelpernull_String{field: "`EarthquakeEpicenters`.`magnitude`"},
	Date:          whereHelpertime_Time{field: "`EarthquakeEpicenters`.`date`"},
	Created:       whereHelpertime_Time{field: "`EarthquakeEpicenters`.`created`"},
	Row:           whereHelperstring{field: "`EarthquakeEpicenters`.`row`"},
}

// EarthquakeEpicenterRels is where relationship names are stored.
var EarthquakeEpicenterRels = struct {
}{}

// earthquakeEpicenterR is where relationships are stored.
type earthquakeEpicenterR struct {
}

// NewStruct creates a new relationship struct
func (*earthquakeEpicenterR) NewStruct() *earthquakeEpicenterR {
	return &earthquakeEpicenterR{}
}

// earthquakeEpicenterL is where Load methods for each relationship are stored.
type earthquakeEpicenterL struct{}

var (
	earthquakeEpicenterAllColumns            = []string{"id", "event_id", "lat", "lon", "depth", "epicenter_name", "magnitude", "date", "created", "row"}
	earthquakeEpicenterColumnsWithoutDefault = []string{"event_id", "lat", "lon", "depth", "epicenter_name", "magnitude", "date", "row"}
	earthquakeEpicenterColumnsWithDefault    = []string{"id", "created"}
	earthquakeEpicenterPrimaryKeyColumns     = []string{"id"}
	earthquakeEpicenterGeneratedColumns      = []string{}
)

type (
	// EarthquakeEpicenterSlice is an alias for a slice of pointers to EarthquakeEpicenter.
	// This should almost always be used instead of []EarthquakeEpicenter.
	EarthquakeEpicenterSlice []*EarthquakeEpicenter
	// EarthquakeEpicenterHook is the signature for custom EarthquakeEpicenter hook methods
	EarthquakeEpicenterHook func(context.Context, boil.ContextExecutor, *EarthquakeEpicenter) error

	earthquakeEpicenterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	earthquakeEpicenterType                 = reflect.TypeOf(&EarthquakeEpicenter{})
	earthquakeEpicenterMapping              = queries.MakeStructMapping(earthquakeEpicenterType)
	earthquakeEpicenterPrimaryKeyMapping, _ = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, earthquakeEpicenterPrimaryKeyColumns)
	earthquakeEpicenterInsertCacheMut       sync.RWMutex
	earthquakeEpicenterInsertCache          = make(map[string]insertCache)
	earthquakeEpicenterUpdateCacheMut       sync.RWMutex
	earthquakeEpicenterUpdateCache          = make(map[string]updateCache)
	earthquakeEpicenterUpsertCacheMut       sync.RWMutex
	earthquakeEpicenterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var earthquakeEpicenterAfterSelectHooks []EarthquakeEpicenterHook

var earthquakeEpicenterBeforeInsertHooks []EarthquakeEpicenterHook
var earthquakeEpicenterAfterInsertHooks []EarthquakeEpicenterHook

var earthquakeEpicenterBeforeUpdateHooks []EarthquakeEpicenterHook
var earthquakeEpicenterAfterUpdateHooks []EarthquakeEpicenterHook

var earthquakeEpicenterBeforeDeleteHooks []EarthquakeEpicenterHook
var earthquakeEpicenterAfterDeleteHooks []EarthquakeEpicenterHook

var earthquakeEpicenterBeforeUpsertHooks []EarthquakeEpicenterHook
var earthquakeEpicenterAfterUpsertHooks []EarthquakeEpicenterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EarthquakeEpicenter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EarthquakeEpicenter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EarthquakeEpicenter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EarthquakeEpicenter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EarthquakeEpicenter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EarthquakeEpicenter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EarthquakeEpicenter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EarthquakeEpicenter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EarthquakeEpicenter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeEpicenterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEarthquakeEpicenterHook registers your hook function for all future operations.
func AddEarthquakeEpicenterHook(hookPoint boil.HookPoint, earthquakeEpicenterHook EarthquakeEpicenterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		earthquakeEpicenterAfterSelectHooks = append(earthquakeEpicenterAfterSelectHooks, earthquakeEpicenterHook)
	case boil.BeforeInsertHook:
		earthquakeEpicenterBeforeInsertHooks = append(earthquakeEpicenterBeforeInsertHooks, earthquakeEpicenterHook)
	case boil.AfterInsertHook:
		earthquakeEpicenterAfterInsertHooks = append(earthquakeEpicenterAfterInsertHooks, earthquakeEpicenterHook)
	case boil.BeforeUpdateHook:
		earthquakeEpicenterBeforeUpdateHooks = append(earthquakeEpicenterBeforeUpdateHooks, earthquakeEpicenterHook)
	case boil.AfterUpdateHook:
		earthquakeEpicenterAfterUpdateHooks = append(earthquakeEpicenterAfterUpdateHooks, earthquakeEpicenterHook)
	case boil.BeforeDeleteHook:
		earthquakeEpicenterBeforeDeleteHooks = append(earthquakeEpicenterBeforeDeleteHooks, earthquakeEpicenterHook)
	case boil.AfterDeleteHook:
		earthquakeEpicenterAfterDeleteHooks = append(earthquakeEpicenterAfterDeleteHooks, earthquakeEpicenterHook)
	case boil.BeforeUpsertHook:
		earthquakeEpicenterBeforeUpsertHooks = append(earthquakeEpicenterBeforeUpsertHooks, earthquakeEpicenterHook)
	case boil.AfterUpsertHook:
		earthquakeEpicenterAfterUpsertHooks = append(earthquakeEpicenterAfterUpsertHooks, earthquakeEpicenterHook)
	}
}

// One returns a single earthquakeEpicenter record from the query.
func (q earthquakeEpicenterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EarthquakeEpicenter, error) {
	o := &EarthquakeEpicenter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for EarthquakeEpicenters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EarthquakeEpicenter records from the query.
func (q earthquakeEpicenterQuery) All(ctx context.Context, exec boil.ContextExecutor) (EarthquakeEpicenterSlice, error) {
	var o []*EarthquakeEpicenter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EarthquakeEpicenter slice")
	}

	if len(earthquakeEpicenterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EarthquakeEpicenter records in the query.
func (q earthquakeEpicenterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count EarthquakeEpicenters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q earthquakeEpicenterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if EarthquakeEpicenters exists")
	}

	return count > 0, nil
}

// EarthquakeEpicenters retrieves all the records using an executor.
func EarthquakeEpicenters(mods ...qm.QueryMod) earthquakeEpicenterQuery {
	mods = append(mods, qm.From("`EarthquakeEpicenters`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`EarthquakeEpicenters`.*"})
	}

	return earthquakeEpicenterQuery{q}
}

// FindEarthquakeEpicenter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEarthquakeEpicenter(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*EarthquakeEpicenter, error) {
	earthquakeEpicenterObj := &EarthquakeEpicenter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `EarthquakeEpicenters` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, earthquakeEpicenterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from EarthquakeEpicenters")
	}

	if err = earthquakeEpicenterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return earthquakeEpicenterObj, err
	}

	return earthquakeEpicenterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EarthquakeEpicenter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeEpicenters provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeEpicenterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	earthquakeEpicenterInsertCacheMut.RLock()
	cache, cached := earthquakeEpicenterInsertCache[key]
	earthquakeEpicenterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			earthquakeEpicenterAllColumns,
			earthquakeEpicenterColumnsWithDefault,
			earthquakeEpicenterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `EarthquakeEpicenters` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `EarthquakeEpicenters` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `EarthquakeEpicenters` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, earthquakeEpicenterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into EarthquakeEpicenters")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeEpicenterMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeEpicenters")
	}

CacheNoHooks:
	if !cached {
		earthquakeEpicenterInsertCacheMut.Lock()
		earthquakeEpicenterInsertCache[key] = cache
		earthquakeEpicenterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EarthquakeEpicenter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EarthquakeEpicenter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	earthquakeEpicenterUpdateCacheMut.RLock()
	cache, cached := earthquakeEpicenterUpdateCache[key]
	earthquakeEpicenterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			earthquakeEpicenterAllColumns,
			earthquakeEpicenterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update EarthquakeEpicenters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `EarthquakeEpicenters` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, earthquakeEpicenterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, append(wl, earthquakeEpicenterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update EarthquakeEpicenters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for EarthquakeEpicenters")
	}

	if !cached {
		earthquakeEpicenterUpdateCacheMut.Lock()
		earthquakeEpicenterUpdateCache[key] = cache
		earthquakeEpicenterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q earthquakeEpicenterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for EarthquakeEpicenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for EarthquakeEpicenters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EarthquakeEpicenterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeEpicenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `EarthquakeEpicenters` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeEpicenterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in earthquakeEpicenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all earthquakeEpicenter")
	}
	return rowsAff, nil
}

var mySQLEarthquakeEpicenterUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EarthquakeEpicenter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeEpicenters provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeEpicenterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEarthquakeEpicenterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	earthquakeEpicenterUpsertCacheMut.RLock()
	cache, cached := earthquakeEpicenterUpsertCache[key]
	earthquakeEpicenterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			earthquakeEpicenterAllColumns,
			earthquakeEpicenterColumnsWithDefault,
			earthquakeEpicenterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			earthquakeEpicenterAllColumns,
			earthquakeEpicenterPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert EarthquakeEpicenters, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`EarthquakeEpicenters`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `EarthquakeEpicenters` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for EarthquakeEpicenters")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeEpicenterMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(earthquakeEpicenterType, earthquakeEpicenterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for EarthquakeEpicenters")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeEpicenters")
	}

CacheNoHooks:
	if !cached {
		earthquakeEpicenterUpsertCacheMut.Lock()
		earthquakeEpicenterUpsertCache[key] = cache
		earthquakeEpicenterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EarthquakeEpicenter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EarthquakeEpicenter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EarthquakeEpicenter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), earthquakeEpicenterPrimaryKeyMapping)
	sql := "DELETE FROM `EarthquakeEpicenters` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from EarthquakeEpicenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for EarthquakeEpicenters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q earthquakeEpicenterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no earthquakeEpicenterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from EarthquakeEpicenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeEpicenters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EarthquakeEpicenterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(earthquakeEpicenterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeEpicenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `EarthquakeEpicenters` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeEpicenterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from earthquakeEpicenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeEpicenters")
	}

	if len(earthquakeEpicenterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EarthquakeEpicenter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEarthquakeEpicenter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EarthquakeEpicenterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EarthquakeEpicenterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeEpicenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `EarthquakeEpicenters`.* FROM `EarthquakeEpicenters` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeEpicenterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EarthquakeEpicenterSlice")
	}

	*o = slice

	return nil
}

// EarthquakeEpicenterExists checks if the EarthquakeEpicenter row exists.
func EarthquakeEpicenterExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `EarthquakeEpicenters` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if EarthquakeEpicenters exists")
	}

	return exists, nil
}

// Exists checks if the EarthquakeEpicenter row exists.
func (o *EarthquakeEpicenter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EarthquakeEpicenterExists(ctx, exec, o.ID)
}
