// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEarthquakes(t *testing.T) {
	t.Parallel()

	query := Earthquakes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEarthquakesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Earthquakes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarthquakeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEarthquakesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EarthquakeExists(ctx, tx, o.EventID)
	if err != nil {
		t.Errorf("Unable to check if Earthquake exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EarthquakeExists to return true, but got false.")
	}
}

func testEarthquakesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	earthquakeFound, err := FindEarthquake(ctx, tx, o.EventID)
	if err != nil {
		t.Error(err)
	}

	if earthquakeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEarthquakesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Earthquakes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEarthquakesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Earthquakes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEarthquakesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	earthquakeOne := &Earthquake{}
	earthquakeTwo := &Earthquake{}
	if err = randomize.Struct(seed, earthquakeOne, earthquakeDBTypes, false, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}
	if err = randomize.Struct(seed, earthquakeTwo, earthquakeDBTypes, false, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earthquakeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earthquakeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Earthquakes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEarthquakesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	earthquakeOne := &Earthquake{}
	earthquakeTwo := &Earthquake{}
	if err = randomize.Struct(seed, earthquakeOne, earthquakeDBTypes, false, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}
	if err = randomize.Struct(seed, earthquakeTwo, earthquakeDBTypes, false, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = earthquakeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = earthquakeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func earthquakeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func earthquakeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Earthquake) error {
	*o = Earthquake{}
	return nil
}

func testEarthquakesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Earthquake{}
	o := &Earthquake{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, earthquakeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Earthquake object: %s", err)
	}

	AddEarthquakeHook(boil.BeforeInsertHook, earthquakeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	earthquakeBeforeInsertHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.AfterInsertHook, earthquakeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	earthquakeAfterInsertHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.AfterSelectHook, earthquakeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	earthquakeAfterSelectHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.BeforeUpdateHook, earthquakeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	earthquakeBeforeUpdateHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.AfterUpdateHook, earthquakeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	earthquakeAfterUpdateHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.BeforeDeleteHook, earthquakeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	earthquakeBeforeDeleteHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.AfterDeleteHook, earthquakeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	earthquakeAfterDeleteHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.BeforeUpsertHook, earthquakeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	earthquakeBeforeUpsertHooks = []EarthquakeHook{}

	AddEarthquakeHook(boil.AfterUpsertHook, earthquakeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	earthquakeAfterUpsertHooks = []EarthquakeHook{}
}

func testEarthquakesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarthquakesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(earthquakeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEarthquakesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarthquakesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EarthquakeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEarthquakesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Earthquakes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	earthquakeDBTypes = map[string]string{`EventID`: `bigint`, `Lat`: `double`, `Lon`: `double`, `Depth`: `int`, `EpicenterName`: `text`, `MaxInt`: `varchar`, `Magnitude`: `text`, `Date`: `datetime`, `Created`: `datetime`, `Modified`: `datetime`}
	_                 = bytes.MinRead
)

func testEarthquakesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(earthquakePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(earthquakeAllColumns) == len(earthquakePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEarthquakesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(earthquakeAllColumns) == len(earthquakePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Earthquake{}
	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, earthquakeDBTypes, true, earthquakePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(earthquakeAllColumns, earthquakePrimaryKeyColumns) {
		fields = earthquakeAllColumns
	} else {
		fields = strmangle.SetComplement(
			earthquakeAllColumns,
			earthquakePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EarthquakeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEarthquakesUpsert(t *testing.T) {
	t.Parallel()

	if len(earthquakeAllColumns) == len(earthquakePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEarthquakeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Earthquake{}
	if err = randomize.Struct(seed, &o, earthquakeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Earthquake: %s", err)
	}

	count, err := Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, earthquakeDBTypes, false, earthquakePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Earthquake struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Earthquake: %s", err)
	}

	count, err = Earthquakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
