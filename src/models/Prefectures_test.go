// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPrefectures(t *testing.T) {
	t.Parallel()

	query := Prefectures()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPrefecturesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefecturesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Prefectures().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefecturesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefectureSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefecturesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PrefectureExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Prefecture exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PrefectureExists to return true, but got false.")
	}
}

func testPrefecturesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	prefectureFound, err := FindPrefecture(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if prefectureFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPrefecturesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Prefectures().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPrefecturesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Prefectures().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPrefecturesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	prefectureOne := &Prefecture{}
	prefectureTwo := &Prefecture{}
	if err = randomize.Struct(seed, prefectureOne, prefectureDBTypes, false, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}
	if err = randomize.Struct(seed, prefectureTwo, prefectureDBTypes, false, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefectureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefectureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Prefectures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPrefecturesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	prefectureOne := &Prefecture{}
	prefectureTwo := &Prefecture{}
	if err = randomize.Struct(seed, prefectureOne, prefectureDBTypes, false, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}
	if err = randomize.Struct(seed, prefectureTwo, prefectureDBTypes, false, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefectureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefectureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func prefectureBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func prefectureAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Prefecture) error {
	*o = Prefecture{}
	return nil
}

func testPrefecturesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Prefecture{}
	o := &Prefecture{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, prefectureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Prefecture object: %s", err)
	}

	AddPrefectureHook(boil.BeforeInsertHook, prefectureBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	prefectureBeforeInsertHooks = []PrefectureHook{}

	AddPrefectureHook(boil.AfterInsertHook, prefectureAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	prefectureAfterInsertHooks = []PrefectureHook{}

	AddPrefectureHook(boil.AfterSelectHook, prefectureAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	prefectureAfterSelectHooks = []PrefectureHook{}

	AddPrefectureHook(boil.BeforeUpdateHook, prefectureBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	prefectureBeforeUpdateHooks = []PrefectureHook{}

	AddPrefectureHook(boil.AfterUpdateHook, prefectureAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	prefectureAfterUpdateHooks = []PrefectureHook{}

	AddPrefectureHook(boil.BeforeDeleteHook, prefectureBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	prefectureBeforeDeleteHooks = []PrefectureHook{}

	AddPrefectureHook(boil.AfterDeleteHook, prefectureAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	prefectureAfterDeleteHooks = []PrefectureHook{}

	AddPrefectureHook(boil.BeforeUpsertHook, prefectureBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	prefectureBeforeUpsertHooks = []PrefectureHook{}

	AddPrefectureHook(boil.AfterUpsertHook, prefectureAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	prefectureAfterUpsertHooks = []PrefectureHook{}
}

func testPrefecturesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefecturesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(prefectureColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefecturesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefecturesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefectureSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefecturesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Prefectures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	prefectureDBTypes = map[string]string{`ID`: `int`, `Name`: `text`, `Created`: `datetime`, `Updated`: `datetime`}
	_                 = bytes.MinRead
)

func testPrefecturesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(prefecturePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(prefectureAllColumns) == len(prefecturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefecturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPrefecturesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(prefectureAllColumns) == len(prefecturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Prefecture{}
	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefectureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefectureDBTypes, true, prefecturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(prefectureAllColumns, prefecturePrimaryKeyColumns) {
		fields = prefectureAllColumns
	} else {
		fields = strmangle.SetComplement(
			prefectureAllColumns,
			prefecturePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PrefectureSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPrefecturesUpsert(t *testing.T) {
	t.Parallel()

	if len(prefectureAllColumns) == len(prefecturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPrefectureUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Prefecture{}
	if err = randomize.Struct(seed, &o, prefectureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Prefecture: %s", err)
	}

	count, err := Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, prefectureDBTypes, false, prefecturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prefecture struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Prefecture: %s", err)
	}

	count, err = Prefectures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
