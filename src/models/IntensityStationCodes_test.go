// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIntensityStationCodes(t *testing.T) {
	t.Parallel()

	query := IntensityStationCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIntensityStationCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IntensityStationCodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IntensityStationCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIntensityStationCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IntensityStationCodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IntensityStationCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IntensityStationCodeExists to return true, but got false.")
	}
}

func testIntensityStationCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	intensityStationCodeFound, err := FindIntensityStationCode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if intensityStationCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIntensityStationCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IntensityStationCodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIntensityStationCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IntensityStationCodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIntensityStationCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	intensityStationCodeOne := &IntensityStationCode{}
	intensityStationCodeTwo := &IntensityStationCode{}
	if err = randomize.Struct(seed, intensityStationCodeOne, intensityStationCodeDBTypes, false, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}
	if err = randomize.Struct(seed, intensityStationCodeTwo, intensityStationCodeDBTypes, false, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = intensityStationCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = intensityStationCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IntensityStationCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIntensityStationCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	intensityStationCodeOne := &IntensityStationCode{}
	intensityStationCodeTwo := &IntensityStationCode{}
	if err = randomize.Struct(seed, intensityStationCodeOne, intensityStationCodeDBTypes, false, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}
	if err = randomize.Struct(seed, intensityStationCodeTwo, intensityStationCodeDBTypes, false, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = intensityStationCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = intensityStationCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func intensityStationCodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func intensityStationCodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IntensityStationCode) error {
	*o = IntensityStationCode{}
	return nil
}

func testIntensityStationCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IntensityStationCode{}
	o := &IntensityStationCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode object: %s", err)
	}

	AddIntensityStationCodeHook(boil.BeforeInsertHook, intensityStationCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeBeforeInsertHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.AfterInsertHook, intensityStationCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeAfterInsertHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.AfterSelectHook, intensityStationCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeAfterSelectHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.BeforeUpdateHook, intensityStationCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeBeforeUpdateHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.AfterUpdateHook, intensityStationCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeAfterUpdateHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.BeforeDeleteHook, intensityStationCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeBeforeDeleteHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.AfterDeleteHook, intensityStationCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeAfterDeleteHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.BeforeUpsertHook, intensityStationCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeBeforeUpsertHooks = []IntensityStationCodeHook{}

	AddIntensityStationCodeHook(boil.AfterUpsertHook, intensityStationCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	intensityStationCodeAfterUpsertHooks = []IntensityStationCodeHook{}
}

func testIntensityStationCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIntensityStationCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(intensityStationCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIntensityStationCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIntensityStationCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IntensityStationCodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIntensityStationCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IntensityStationCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	intensityStationCodeDBTypes = map[string]string{`ID`: `int`, `Name`: `text`, `Lat`: `double`, `Lon`: `double`, `PrefectureID`: `int`, `AreaID`: `int`, `Created`: `datetime`, `Updated`: `datetime`}
	_                           = bytes.MinRead
)

func testIntensityStationCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(intensityStationCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(intensityStationCodeAllColumns) == len(intensityStationCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIntensityStationCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(intensityStationCodeAllColumns) == len(intensityStationCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IntensityStationCode{}
	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, intensityStationCodeDBTypes, true, intensityStationCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(intensityStationCodeAllColumns, intensityStationCodePrimaryKeyColumns) {
		fields = intensityStationCodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			intensityStationCodeAllColumns,
			intensityStationCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IntensityStationCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIntensityStationCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(intensityStationCodeAllColumns) == len(intensityStationCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIntensityStationCodeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IntensityStationCode{}
	if err = randomize.Struct(seed, &o, intensityStationCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IntensityStationCode: %s", err)
	}

	count, err := IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, intensityStationCodeDBTypes, false, intensityStationCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IntensityStationCode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IntensityStationCode: %s", err)
	}

	count, err = IntensityStationCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
