// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EarthquakeInfo is an object representing the database table.
type EarthquakeInfo struct {
	ID            uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID       int64       `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	Lat           int         `boil:"lat" json:"lat" toml:"lat" yaml:"lat"`
	Lon           int         `boil:"lon" json:"lon" toml:"lon" yaml:"lon"`
	Depth         int         `boil:"depth" json:"depth" toml:"depth" yaml:"depth"`
	EpicenterName string      `boil:"epicenter_name" json:"epicenter_name" toml:"epicenter_name" yaml:"epicenter_name"`
	MaxInt        null.String `boil:"max_int" json:"max_int,omitempty" toml:"max_int" yaml:"max_int,omitempty"`
	Magnitude     null.String `boil:"magnitude" json:"magnitude,omitempty" toml:"magnitude" yaml:"magnitude,omitempty"`
	MagnitudeType null.String `boil:"magnitude_type" json:"magnitude_type,omitempty" toml:"magnitude_type" yaml:"magnitude_type,omitempty"`
	Date          time.Time   `boil:"date" json:"date" toml:"date" yaml:"date"`
	Created       time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Row           string      `boil:"row" json:"row" toml:"row" yaml:"row"`

	R *earthquakeInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L earthquakeInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EarthquakeInfoColumns = struct {
	ID            string
	EventID       string
	Lat           string
	Lon           string
	Depth         string
	EpicenterName string
	MaxInt        string
	Magnitude     string
	MagnitudeType string
	Date          string
	Created       string
	Row           string
}{
	ID:            "id",
	EventID:       "event_id",
	Lat:           "lat",
	Lon:           "lon",
	Depth:         "depth",
	EpicenterName: "epicenter_name",
	MaxInt:        "max_int",
	Magnitude:     "magnitude",
	MagnitudeType: "magnitude_type",
	Date:          "date",
	Created:       "created",
	Row:           "row",
}

var EarthquakeInfoTableColumns = struct {
	ID            string
	EventID       string
	Lat           string
	Lon           string
	Depth         string
	EpicenterName string
	MaxInt        string
	Magnitude     string
	MagnitudeType string
	Date          string
	Created       string
	Row           string
}{
	ID:            "EarthquakeInfos.id",
	EventID:       "EarthquakeInfos.event_id",
	Lat:           "EarthquakeInfos.lat",
	Lon:           "EarthquakeInfos.lon",
	Depth:         "EarthquakeInfos.depth",
	EpicenterName: "EarthquakeInfos.epicenter_name",
	MaxInt:        "EarthquakeInfos.max_int",
	Magnitude:     "EarthquakeInfos.magnitude",
	MagnitudeType: "EarthquakeInfos.magnitude_type",
	Date:          "EarthquakeInfos.date",
	Created:       "EarthquakeInfos.created",
	Row:           "EarthquakeInfos.row",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EarthquakeInfoWhere = struct {
	ID            whereHelperuint
	EventID       whereHelperint64
	Lat           whereHelperint
	Lon           whereHelperint
	Depth         whereHelperint
	EpicenterName whereHelperstring
	MaxInt        whereHelpernull_String
	Magnitude     whereHelpernull_String
	MagnitudeType whereHelpernull_String
	Date          whereHelpertime_Time
	Created       whereHelpertime_Time
	Row           whereHelperstring
}{
	ID:            whereHelperuint{field: "`EarthquakeInfos`.`id`"},
	EventID:       whereHelperint64{field: "`EarthquakeInfos`.`event_id`"},
	Lat:           whereHelperint{field: "`EarthquakeInfos`.`lat`"},
	Lon:           whereHelperint{field: "`EarthquakeInfos`.`lon`"},
	Depth:         whereHelperint{field: "`EarthquakeInfos`.`depth`"},
	EpicenterName: whereHelperstring{field: "`EarthquakeInfos`.`epicenter_name`"},
	MaxInt:        whereHelpernull_String{field: "`EarthquakeInfos`.`max_int`"},
	Magnitude:     whereHelpernull_String{field: "`EarthquakeInfos`.`magnitude`"},
	MagnitudeType: whereHelpernull_String{field: "`EarthquakeInfos`.`magnitude_type`"},
	Date:          whereHelpertime_Time{field: "`EarthquakeInfos`.`date`"},
	Created:       whereHelpertime_Time{field: "`EarthquakeInfos`.`created`"},
	Row:           whereHelperstring{field: "`EarthquakeInfos`.`row`"},
}

// EarthquakeInfoRels is where relationship names are stored.
var EarthquakeInfoRels = struct {
}{}

// earthquakeInfoR is where relationships are stored.
type earthquakeInfoR struct {
}

// NewStruct creates a new relationship struct
func (*earthquakeInfoR) NewStruct() *earthquakeInfoR {
	return &earthquakeInfoR{}
}

// earthquakeInfoL is where Load methods for each relationship are stored.
type earthquakeInfoL struct{}

var (
	earthquakeInfoAllColumns            = []string{"id", "event_id", "lat", "lon", "depth", "epicenter_name", "max_int", "magnitude", "magnitude_type", "date", "created", "row"}
	earthquakeInfoColumnsWithoutDefault = []string{"event_id", "lat", "lon", "depth", "epicenter_name", "max_int", "magnitude", "magnitude_type", "date", "row"}
	earthquakeInfoColumnsWithDefault    = []string{"id", "created"}
	earthquakeInfoPrimaryKeyColumns     = []string{"id"}
	earthquakeInfoGeneratedColumns      = []string{}
)

type (
	// EarthquakeInfoSlice is an alias for a slice of pointers to EarthquakeInfo.
	// This should almost always be used instead of []EarthquakeInfo.
	EarthquakeInfoSlice []*EarthquakeInfo
	// EarthquakeInfoHook is the signature for custom EarthquakeInfo hook methods
	EarthquakeInfoHook func(context.Context, boil.ContextExecutor, *EarthquakeInfo) error

	earthquakeInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	earthquakeInfoType                 = reflect.TypeOf(&EarthquakeInfo{})
	earthquakeInfoMapping              = queries.MakeStructMapping(earthquakeInfoType)
	earthquakeInfoPrimaryKeyMapping, _ = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, earthquakeInfoPrimaryKeyColumns)
	earthquakeInfoInsertCacheMut       sync.RWMutex
	earthquakeInfoInsertCache          = make(map[string]insertCache)
	earthquakeInfoUpdateCacheMut       sync.RWMutex
	earthquakeInfoUpdateCache          = make(map[string]updateCache)
	earthquakeInfoUpsertCacheMut       sync.RWMutex
	earthquakeInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var earthquakeInfoAfterSelectHooks []EarthquakeInfoHook

var earthquakeInfoBeforeInsertHooks []EarthquakeInfoHook
var earthquakeInfoAfterInsertHooks []EarthquakeInfoHook

var earthquakeInfoBeforeUpdateHooks []EarthquakeInfoHook
var earthquakeInfoAfterUpdateHooks []EarthquakeInfoHook

var earthquakeInfoBeforeDeleteHooks []EarthquakeInfoHook
var earthquakeInfoAfterDeleteHooks []EarthquakeInfoHook

var earthquakeInfoBeforeUpsertHooks []EarthquakeInfoHook
var earthquakeInfoAfterUpsertHooks []EarthquakeInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EarthquakeInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EarthquakeInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EarthquakeInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EarthquakeInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EarthquakeInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EarthquakeInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EarthquakeInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EarthquakeInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EarthquakeInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEarthquakeInfoHook registers your hook function for all future operations.
func AddEarthquakeInfoHook(hookPoint boil.HookPoint, earthquakeInfoHook EarthquakeInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		earthquakeInfoAfterSelectHooks = append(earthquakeInfoAfterSelectHooks, earthquakeInfoHook)
	case boil.BeforeInsertHook:
		earthquakeInfoBeforeInsertHooks = append(earthquakeInfoBeforeInsertHooks, earthquakeInfoHook)
	case boil.AfterInsertHook:
		earthquakeInfoAfterInsertHooks = append(earthquakeInfoAfterInsertHooks, earthquakeInfoHook)
	case boil.BeforeUpdateHook:
		earthquakeInfoBeforeUpdateHooks = append(earthquakeInfoBeforeUpdateHooks, earthquakeInfoHook)
	case boil.AfterUpdateHook:
		earthquakeInfoAfterUpdateHooks = append(earthquakeInfoAfterUpdateHooks, earthquakeInfoHook)
	case boil.BeforeDeleteHook:
		earthquakeInfoBeforeDeleteHooks = append(earthquakeInfoBeforeDeleteHooks, earthquakeInfoHook)
	case boil.AfterDeleteHook:
		earthquakeInfoAfterDeleteHooks = append(earthquakeInfoAfterDeleteHooks, earthquakeInfoHook)
	case boil.BeforeUpsertHook:
		earthquakeInfoBeforeUpsertHooks = append(earthquakeInfoBeforeUpsertHooks, earthquakeInfoHook)
	case boil.AfterUpsertHook:
		earthquakeInfoAfterUpsertHooks = append(earthquakeInfoAfterUpsertHooks, earthquakeInfoHook)
	}
}

// One returns a single earthquakeInfo record from the query.
func (q earthquakeInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EarthquakeInfo, error) {
	o := &EarthquakeInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for EarthquakeInfos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EarthquakeInfo records from the query.
func (q earthquakeInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (EarthquakeInfoSlice, error) {
	var o []*EarthquakeInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EarthquakeInfo slice")
	}

	if len(earthquakeInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EarthquakeInfo records in the query.
func (q earthquakeInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count EarthquakeInfos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q earthquakeInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if EarthquakeInfos exists")
	}

	return count > 0, nil
}

// EarthquakeInfos retrieves all the records using an executor.
func EarthquakeInfos(mods ...qm.QueryMod) earthquakeInfoQuery {
	mods = append(mods, qm.From("`EarthquakeInfos`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`EarthquakeInfos`.*"})
	}

	return earthquakeInfoQuery{q}
}

// FindEarthquakeInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEarthquakeInfo(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*EarthquakeInfo, error) {
	earthquakeInfoObj := &EarthquakeInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `EarthquakeInfos` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, earthquakeInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from EarthquakeInfos")
	}

	if err = earthquakeInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return earthquakeInfoObj, err
	}

	return earthquakeInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EarthquakeInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeInfos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	earthquakeInfoInsertCacheMut.RLock()
	cache, cached := earthquakeInfoInsertCache[key]
	earthquakeInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			earthquakeInfoAllColumns,
			earthquakeInfoColumnsWithDefault,
			earthquakeInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `EarthquakeInfos` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `EarthquakeInfos` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `EarthquakeInfos` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, earthquakeInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into EarthquakeInfos")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeInfoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeInfos")
	}

CacheNoHooks:
	if !cached {
		earthquakeInfoInsertCacheMut.Lock()
		earthquakeInfoInsertCache[key] = cache
		earthquakeInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EarthquakeInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EarthquakeInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	earthquakeInfoUpdateCacheMut.RLock()
	cache, cached := earthquakeInfoUpdateCache[key]
	earthquakeInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			earthquakeInfoAllColumns,
			earthquakeInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update EarthquakeInfos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `EarthquakeInfos` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, earthquakeInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, append(wl, earthquakeInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update EarthquakeInfos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for EarthquakeInfos")
	}

	if !cached {
		earthquakeInfoUpdateCacheMut.Lock()
		earthquakeInfoUpdateCache[key] = cache
		earthquakeInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q earthquakeInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for EarthquakeInfos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for EarthquakeInfos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EarthquakeInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `EarthquakeInfos` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in earthquakeInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all earthquakeInfo")
	}
	return rowsAff, nil
}

var mySQLEarthquakeInfoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EarthquakeInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeInfos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEarthquakeInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	earthquakeInfoUpsertCacheMut.RLock()
	cache, cached := earthquakeInfoUpsertCache[key]
	earthquakeInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			earthquakeInfoAllColumns,
			earthquakeInfoColumnsWithDefault,
			earthquakeInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			earthquakeInfoAllColumns,
			earthquakeInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert EarthquakeInfos, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`EarthquakeInfos`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `EarthquakeInfos` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for EarthquakeInfos")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeInfoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(earthquakeInfoType, earthquakeInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for EarthquakeInfos")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeInfos")
	}

CacheNoHooks:
	if !cached {
		earthquakeInfoUpsertCacheMut.Lock()
		earthquakeInfoUpsertCache[key] = cache
		earthquakeInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EarthquakeInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EarthquakeInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EarthquakeInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), earthquakeInfoPrimaryKeyMapping)
	sql := "DELETE FROM `EarthquakeInfos` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from EarthquakeInfos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for EarthquakeInfos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q earthquakeInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no earthquakeInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from EarthquakeInfos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeInfos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EarthquakeInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(earthquakeInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `EarthquakeInfos` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from earthquakeInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeInfos")
	}

	if len(earthquakeInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EarthquakeInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEarthquakeInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EarthquakeInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EarthquakeInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `EarthquakeInfos`.* FROM `EarthquakeInfos` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EarthquakeInfoSlice")
	}

	*o = slice

	return nil
}

// EarthquakeInfoExists checks if the EarthquakeInfo row exists.
func EarthquakeInfoExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `EarthquakeInfos` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if EarthquakeInfos exists")
	}

	return exists, nil
}

// Exists checks if the EarthquakeInfo row exists.
func (o *EarthquakeInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EarthquakeInfoExists(ctx, exec, o.ID)
}
