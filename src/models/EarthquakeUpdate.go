// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EarthquakeUpdate is an object representing the database table.
type EarthquakeUpdate struct {
	ID        uint         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID   uint64       `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	Lat       null.Float64 `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	Lon       null.Float64 `boil:"lon" json:"lon,omitempty" toml:"lon" yaml:"lon,omitempty"`
	Depth     null.Int     `boil:"depth" json:"depth,omitempty" toml:"depth" yaml:"depth,omitempty"`
	Magnitude null.String  `boil:"magnitude" json:"magnitude,omitempty" toml:"magnitude" yaml:"magnitude,omitempty"`
	Date      time.Time    `boil:"date" json:"date" toml:"date" yaml:"date"`
	Created   time.Time    `boil:"created" json:"created" toml:"created" yaml:"created"`
	Row       string       `boil:"row" json:"row" toml:"row" yaml:"row"`

	R *earthquakeUpdateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L earthquakeUpdateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EarthquakeUpdateColumns = struct {
	ID        string
	EventID   string
	Lat       string
	Lon       string
	Depth     string
	Magnitude string
	Date      string
	Created   string
	Row       string
}{
	ID:        "id",
	EventID:   "event_id",
	Lat:       "lat",
	Lon:       "lon",
	Depth:     "depth",
	Magnitude: "magnitude",
	Date:      "date",
	Created:   "created",
	Row:       "row",
}

var EarthquakeUpdateTableColumns = struct {
	ID        string
	EventID   string
	Lat       string
	Lon       string
	Depth     string
	Magnitude string
	Date      string
	Created   string
	Row       string
}{
	ID:        "EarthquakeUpdate.id",
	EventID:   "EarthquakeUpdate.event_id",
	Lat:       "EarthquakeUpdate.lat",
	Lon:       "EarthquakeUpdate.lon",
	Depth:     "EarthquakeUpdate.depth",
	Magnitude: "EarthquakeUpdate.magnitude",
	Date:      "EarthquakeUpdate.date",
	Created:   "EarthquakeUpdate.created",
	Row:       "EarthquakeUpdate.row",
}

// Generated where

var EarthquakeUpdateWhere = struct {
	ID        whereHelperuint
	EventID   whereHelperuint64
	Lat       whereHelpernull_Float64
	Lon       whereHelpernull_Float64
	Depth     whereHelpernull_Int
	Magnitude whereHelpernull_String
	Date      whereHelpertime_Time
	Created   whereHelpertime_Time
	Row       whereHelperstring
}{
	ID:        whereHelperuint{field: "`EarthquakeUpdate`.`id`"},
	EventID:   whereHelperuint64{field: "`EarthquakeUpdate`.`event_id`"},
	Lat:       whereHelpernull_Float64{field: "`EarthquakeUpdate`.`lat`"},
	Lon:       whereHelpernull_Float64{field: "`EarthquakeUpdate`.`lon`"},
	Depth:     whereHelpernull_Int{field: "`EarthquakeUpdate`.`depth`"},
	Magnitude: whereHelpernull_String{field: "`EarthquakeUpdate`.`magnitude`"},
	Date:      whereHelpertime_Time{field: "`EarthquakeUpdate`.`date`"},
	Created:   whereHelpertime_Time{field: "`EarthquakeUpdate`.`created`"},
	Row:       whereHelperstring{field: "`EarthquakeUpdate`.`row`"},
}

// EarthquakeUpdateRels is where relationship names are stored.
var EarthquakeUpdateRels = struct {
}{}

// earthquakeUpdateR is where relationships are stored.
type earthquakeUpdateR struct {
}

// NewStruct creates a new relationship struct
func (*earthquakeUpdateR) NewStruct() *earthquakeUpdateR {
	return &earthquakeUpdateR{}
}

// earthquakeUpdateL is where Load methods for each relationship are stored.
type earthquakeUpdateL struct{}

var (
	earthquakeUpdateAllColumns            = []string{"id", "event_id", "lat", "lon", "depth", "magnitude", "date", "created", "row"}
	earthquakeUpdateColumnsWithoutDefault = []string{"event_id", "lat", "lon", "depth", "magnitude", "date", "row"}
	earthquakeUpdateColumnsWithDefault    = []string{"id", "created"}
	earthquakeUpdatePrimaryKeyColumns     = []string{"id"}
	earthquakeUpdateGeneratedColumns      = []string{}
)

type (
	// EarthquakeUpdateSlice is an alias for a slice of pointers to EarthquakeUpdate.
	// This should almost always be used instead of []EarthquakeUpdate.
	EarthquakeUpdateSlice []*EarthquakeUpdate
	// EarthquakeUpdateHook is the signature for custom EarthquakeUpdate hook methods
	EarthquakeUpdateHook func(context.Context, boil.ContextExecutor, *EarthquakeUpdate) error

	earthquakeUpdateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	earthquakeUpdateType                 = reflect.TypeOf(&EarthquakeUpdate{})
	earthquakeUpdateMapping              = queries.MakeStructMapping(earthquakeUpdateType)
	earthquakeUpdatePrimaryKeyMapping, _ = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, earthquakeUpdatePrimaryKeyColumns)
	earthquakeUpdateInsertCacheMut       sync.RWMutex
	earthquakeUpdateInsertCache          = make(map[string]insertCache)
	earthquakeUpdateUpdateCacheMut       sync.RWMutex
	earthquakeUpdateUpdateCache          = make(map[string]updateCache)
	earthquakeUpdateUpsertCacheMut       sync.RWMutex
	earthquakeUpdateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var earthquakeUpdateAfterSelectHooks []EarthquakeUpdateHook

var earthquakeUpdateBeforeInsertHooks []EarthquakeUpdateHook
var earthquakeUpdateAfterInsertHooks []EarthquakeUpdateHook

var earthquakeUpdateBeforeUpdateHooks []EarthquakeUpdateHook
var earthquakeUpdateAfterUpdateHooks []EarthquakeUpdateHook

var earthquakeUpdateBeforeDeleteHooks []EarthquakeUpdateHook
var earthquakeUpdateAfterDeleteHooks []EarthquakeUpdateHook

var earthquakeUpdateBeforeUpsertHooks []EarthquakeUpdateHook
var earthquakeUpdateAfterUpsertHooks []EarthquakeUpdateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EarthquakeUpdate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EarthquakeUpdate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EarthquakeUpdate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EarthquakeUpdate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EarthquakeUpdate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EarthquakeUpdate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EarthquakeUpdate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EarthquakeUpdate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EarthquakeUpdate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range earthquakeUpdateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEarthquakeUpdateHook registers your hook function for all future operations.
func AddEarthquakeUpdateHook(hookPoint boil.HookPoint, earthquakeUpdateHook EarthquakeUpdateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		earthquakeUpdateAfterSelectHooks = append(earthquakeUpdateAfterSelectHooks, earthquakeUpdateHook)
	case boil.BeforeInsertHook:
		earthquakeUpdateBeforeInsertHooks = append(earthquakeUpdateBeforeInsertHooks, earthquakeUpdateHook)
	case boil.AfterInsertHook:
		earthquakeUpdateAfterInsertHooks = append(earthquakeUpdateAfterInsertHooks, earthquakeUpdateHook)
	case boil.BeforeUpdateHook:
		earthquakeUpdateBeforeUpdateHooks = append(earthquakeUpdateBeforeUpdateHooks, earthquakeUpdateHook)
	case boil.AfterUpdateHook:
		earthquakeUpdateAfterUpdateHooks = append(earthquakeUpdateAfterUpdateHooks, earthquakeUpdateHook)
	case boil.BeforeDeleteHook:
		earthquakeUpdateBeforeDeleteHooks = append(earthquakeUpdateBeforeDeleteHooks, earthquakeUpdateHook)
	case boil.AfterDeleteHook:
		earthquakeUpdateAfterDeleteHooks = append(earthquakeUpdateAfterDeleteHooks, earthquakeUpdateHook)
	case boil.BeforeUpsertHook:
		earthquakeUpdateBeforeUpsertHooks = append(earthquakeUpdateBeforeUpsertHooks, earthquakeUpdateHook)
	case boil.AfterUpsertHook:
		earthquakeUpdateAfterUpsertHooks = append(earthquakeUpdateAfterUpsertHooks, earthquakeUpdateHook)
	}
}

// One returns a single earthquakeUpdate record from the query.
func (q earthquakeUpdateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EarthquakeUpdate, error) {
	o := &EarthquakeUpdate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for EarthquakeUpdate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EarthquakeUpdate records from the query.
func (q earthquakeUpdateQuery) All(ctx context.Context, exec boil.ContextExecutor) (EarthquakeUpdateSlice, error) {
	var o []*EarthquakeUpdate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EarthquakeUpdate slice")
	}

	if len(earthquakeUpdateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EarthquakeUpdate records in the query.
func (q earthquakeUpdateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count EarthquakeUpdate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q earthquakeUpdateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if EarthquakeUpdate exists")
	}

	return count > 0, nil
}

// EarthquakeUpdates retrieves all the records using an executor.
func EarthquakeUpdates(mods ...qm.QueryMod) earthquakeUpdateQuery {
	mods = append(mods, qm.From("`EarthquakeUpdate`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`EarthquakeUpdate`.*"})
	}

	return earthquakeUpdateQuery{q}
}

// FindEarthquakeUpdate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEarthquakeUpdate(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*EarthquakeUpdate, error) {
	earthquakeUpdateObj := &EarthquakeUpdate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `EarthquakeUpdate` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, earthquakeUpdateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from EarthquakeUpdate")
	}

	if err = earthquakeUpdateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return earthquakeUpdateObj, err
	}

	return earthquakeUpdateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EarthquakeUpdate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeUpdate provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeUpdateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	earthquakeUpdateInsertCacheMut.RLock()
	cache, cached := earthquakeUpdateInsertCache[key]
	earthquakeUpdateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			earthquakeUpdateAllColumns,
			earthquakeUpdateColumnsWithDefault,
			earthquakeUpdateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `EarthquakeUpdate` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `EarthquakeUpdate` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `EarthquakeUpdate` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, earthquakeUpdatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into EarthquakeUpdate")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeUpdateMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeUpdate")
	}

CacheNoHooks:
	if !cached {
		earthquakeUpdateInsertCacheMut.Lock()
		earthquakeUpdateInsertCache[key] = cache
		earthquakeUpdateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EarthquakeUpdate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EarthquakeUpdate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	earthquakeUpdateUpdateCacheMut.RLock()
	cache, cached := earthquakeUpdateUpdateCache[key]
	earthquakeUpdateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			earthquakeUpdateAllColumns,
			earthquakeUpdatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update EarthquakeUpdate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `EarthquakeUpdate` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, earthquakeUpdatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, append(wl, earthquakeUpdatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update EarthquakeUpdate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for EarthquakeUpdate")
	}

	if !cached {
		earthquakeUpdateUpdateCacheMut.Lock()
		earthquakeUpdateUpdateCache[key] = cache
		earthquakeUpdateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q earthquakeUpdateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for EarthquakeUpdate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for EarthquakeUpdate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EarthquakeUpdateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `EarthquakeUpdate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeUpdatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in earthquakeUpdate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all earthquakeUpdate")
	}
	return rowsAff, nil
}

var mySQLEarthquakeUpdateUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EarthquakeUpdate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EarthquakeUpdate provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(earthquakeUpdateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEarthquakeUpdateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	earthquakeUpdateUpsertCacheMut.RLock()
	cache, cached := earthquakeUpdateUpsertCache[key]
	earthquakeUpdateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			earthquakeUpdateAllColumns,
			earthquakeUpdateColumnsWithDefault,
			earthquakeUpdateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			earthquakeUpdateAllColumns,
			earthquakeUpdatePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert EarthquakeUpdate, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`EarthquakeUpdate`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `EarthquakeUpdate` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for EarthquakeUpdate")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == earthquakeUpdateMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(earthquakeUpdateType, earthquakeUpdateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for EarthquakeUpdate")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for EarthquakeUpdate")
	}

CacheNoHooks:
	if !cached {
		earthquakeUpdateUpsertCacheMut.Lock()
		earthquakeUpdateUpsertCache[key] = cache
		earthquakeUpdateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EarthquakeUpdate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EarthquakeUpdate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EarthquakeUpdate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), earthquakeUpdatePrimaryKeyMapping)
	sql := "DELETE FROM `EarthquakeUpdate` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from EarthquakeUpdate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for EarthquakeUpdate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q earthquakeUpdateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no earthquakeUpdateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from EarthquakeUpdate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeUpdate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EarthquakeUpdateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(earthquakeUpdateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `EarthquakeUpdate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeUpdatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from earthquakeUpdate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EarthquakeUpdate")
	}

	if len(earthquakeUpdateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EarthquakeUpdate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEarthquakeUpdate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EarthquakeUpdateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EarthquakeUpdateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), earthquakeUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `EarthquakeUpdate`.* FROM `EarthquakeUpdate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, earthquakeUpdatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EarthquakeUpdateSlice")
	}

	*o = slice

	return nil
}

// EarthquakeUpdateExists checks if the EarthquakeUpdate row exists.
func EarthquakeUpdateExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `EarthquakeUpdate` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if EarthquakeUpdate exists")
	}

	return exists, nil
}

// Exists checks if the EarthquakeUpdate row exists.
func (o *EarthquakeUpdate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EarthquakeUpdateExists(ctx, exec, o.ID)
}
