// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAreas(t *testing.T) {
	t.Parallel()

	query := Areas()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAreasDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Areas().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AreasSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAreasExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AreasExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Areas exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AreasExists to return true, but got false.")
	}
}

func testAreasFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	areasFound, err := FindAreas(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if areasFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAreasBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Areas().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAreasOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Areas().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAreasAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	areasOne := &Areas{}
	areasTwo := &Areas{}
	if err = randomize.Struct(seed, areasOne, areasDBTypes, false, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}
	if err = randomize.Struct(seed, areasTwo, areasDBTypes, false, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = areasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = areasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Areas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAreasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	areasOne := &Areas{}
	areasTwo := &Areas{}
	if err = randomize.Struct(seed, areasOne, areasDBTypes, false, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}
	if err = randomize.Struct(seed, areasTwo, areasDBTypes, false, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = areasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = areasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func areasBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func areasAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Areas) error {
	*o = Areas{}
	return nil
}

func testAreasHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Areas{}
	o := &Areas{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, areasDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Areas object: %s", err)
	}

	AddAreasHook(boil.BeforeInsertHook, areasBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	areasBeforeInsertHooks = []AreasHook{}

	AddAreasHook(boil.AfterInsertHook, areasAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	areasAfterInsertHooks = []AreasHook{}

	AddAreasHook(boil.AfterSelectHook, areasAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	areasAfterSelectHooks = []AreasHook{}

	AddAreasHook(boil.BeforeUpdateHook, areasBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	areasBeforeUpdateHooks = []AreasHook{}

	AddAreasHook(boil.AfterUpdateHook, areasAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	areasAfterUpdateHooks = []AreasHook{}

	AddAreasHook(boil.BeforeDeleteHook, areasBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	areasBeforeDeleteHooks = []AreasHook{}

	AddAreasHook(boil.AfterDeleteHook, areasAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	areasAfterDeleteHooks = []AreasHook{}

	AddAreasHook(boil.BeforeUpsertHook, areasBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	areasBeforeUpsertHooks = []AreasHook{}

	AddAreasHook(boil.AfterUpsertHook, areasAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	areasAfterUpsertHooks = []AreasHook{}
}

func testAreasInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAreasInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(areasColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAreasReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAreasReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AreasSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAreasSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Areas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	areasDBTypes = map[string]string{`ID`: `int`, `Name`: `text`, `PrefectureID`: `int`, `Created`: `datetime`, `Updated`: `datetime`}
	_            = bytes.MinRead
)

func testAreasUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(areasPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(areasAllColumns) == len(areasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, areasDBTypes, true, areasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAreasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(areasAllColumns) == len(areasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Areas{}
	if err = randomize.Struct(seed, o, areasDBTypes, true, areasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, areasDBTypes, true, areasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(areasAllColumns, areasPrimaryKeyColumns) {
		fields = areasAllColumns
	} else {
		fields = strmangle.SetComplement(
			areasAllColumns,
			areasPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AreasSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAreasUpsert(t *testing.T) {
	t.Parallel()

	if len(areasAllColumns) == len(areasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAreasUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Areas{}
	if err = randomize.Struct(seed, &o, areasDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Areas: %s", err)
	}

	count, err := Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, areasDBTypes, false, areasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Areas struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Areas: %s", err)
	}

	count, err = Areas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
